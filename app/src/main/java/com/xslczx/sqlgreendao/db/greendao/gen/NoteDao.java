package com.xslczx.sqlgreendao.db.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xslczx.sqlgreendao.db.greendao.converter.StringConverter;
import java.util.List;

import com.xslczx.sqlgreendao.db.greendao.entity.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE".
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NoteId = new Property(1, String.class, "noteId", false, "NOTE_ID");
        public final static Property TypeName = new Property(2, String.class, "typeName", false, "TYPE_NAME");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property CreatedAt = new Property(4, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(5, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property SyncAt = new Property(6, java.util.Date.class, "syncAt", false, "SYNC_AT");
        public final static Property RemindAt = new Property(7, java.util.Date.class, "remindAt", false, "REMIND_AT");
        public final static Property Sort = new Property(8, int.class, "sort", false, "SORT");
        public final static Property Status = new Property(9, int.class, "status", false, "STATUS");
        public final static Property Media = new Property(10, String.class, "media", false, "MEDIA");
        public final static Property Typeface = new Property(11, String.class, "typeface", false, "TYPEFACE");
    }

    private final StringConverter mediaConverter = new StringConverter();
    private final StringConverter typefaceConverter = new StringConverter();

    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOTE_ID\" TEXT NOT NULL UNIQUE ," + // 1: noteId
                "\"TYPE_NAME\" TEXT NOT NULL ," + // 2: typeName
                "\"CONTENT\" TEXT," + // 3: content
                "\"CREATED_AT\" INTEGER NOT NULL ," + // 4: createdAt
                "\"UPDATED_AT\" INTEGER NOT NULL ," + // 5: updatedAt
                "\"SYNC_AT\" INTEGER," + // 6: syncAt
                "\"REMIND_AT\" INTEGER," + // 7: remindAt
                "\"SORT\" INTEGER NOT NULL ," + // 8: sort
                "\"STATUS\" INTEGER NOT NULL ," + // 9: status
                "\"MEDIA\" TEXT," + // 10: media
                "\"TYPEFACE\" TEXT);"); // 11: typeface
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNoteId());
        stmt.bindString(3, entity.getTypeName());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
        stmt.bindLong(5, entity.getCreatedAt().getTime());
        stmt.bindLong(6, entity.getUpdatedAt().getTime());
 
        java.util.Date syncAt = entity.getSyncAt();
        if (syncAt != null) {
            stmt.bindLong(7, syncAt.getTime());
        }
 
        java.util.Date remindAt = entity.getRemindAt();
        if (remindAt != null) {
            stmt.bindLong(8, remindAt.getTime());
        }
        stmt.bindLong(9, entity.getSort());
        stmt.bindLong(10, entity.getStatus());
 
        List media = entity.getMedia();
        if (media != null) {
            stmt.bindString(11, mediaConverter.convertToDatabaseValue(media));
        }
 
        List typeface = entity.getTypeface();
        if (typeface != null) {
            stmt.bindString(12, typefaceConverter.convertToDatabaseValue(typeface));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNoteId());
        stmt.bindString(3, entity.getTypeName());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
        stmt.bindLong(5, entity.getCreatedAt().getTime());
        stmt.bindLong(6, entity.getUpdatedAt().getTime());
 
        java.util.Date syncAt = entity.getSyncAt();
        if (syncAt != null) {
            stmt.bindLong(7, syncAt.getTime());
        }
 
        java.util.Date remindAt = entity.getRemindAt();
        if (remindAt != null) {
            stmt.bindLong(8, remindAt.getTime());
        }
        stmt.bindLong(9, entity.getSort());
        stmt.bindLong(10, entity.getStatus());
 
        List media = entity.getMedia();
        if (media != null) {
            stmt.bindString(11, mediaConverter.convertToDatabaseValue(media));
        }
 
        List typeface = entity.getTypeface();
        if (typeface != null) {
            stmt.bindString(12, typefaceConverter.convertToDatabaseValue(typeface));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // noteId
            cursor.getString(offset + 2), // typeName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            new java.util.Date(cursor.getLong(offset + 4)), // createdAt
            new java.util.Date(cursor.getLong(offset + 5)), // updatedAt
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // syncAt
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // remindAt
            cursor.getInt(offset + 8), // sort
            cursor.getInt(offset + 9), // status
            cursor.isNull(offset + 10) ? null : mediaConverter.convertToEntityProperty(cursor.getString(offset + 10)), // media
            cursor.isNull(offset + 11) ? null : typefaceConverter.convertToEntityProperty(cursor.getString(offset + 11)) // typeface
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNoteId(cursor.getString(offset + 1));
        entity.setTypeName(cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setSyncAt(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setRemindAt(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setSort(cursor.getInt(offset + 8));
        entity.setStatus(cursor.getInt(offset + 9));
        entity.setMedia(cursor.isNull(offset + 10) ? null : mediaConverter.convertToEntityProperty(cursor.getString(offset + 10)));
        entity.setTypeface(cursor.isNull(offset + 11) ? null : typefaceConverter.convertToEntityProperty(cursor.getString(offset + 11)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Note entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
